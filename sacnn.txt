simple cnn code
!pip install tf-nightly-gpu-2.0-preview
import tensorflow as tf
import tensorflow as tf
print("Num GPUs Available:", len(tf.config.list_physical_devices('GPU')))
import tensorflow as tf
import numpy as np
import random
import os
def set_seed(seed=42):
    tf.random.set_seed(seed)
    np.random.seed(seed)
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)

set_seed(42)

from tensorflow.keras import mixed_precision
mixed_precision.set_global_policy('float32')
data_dir = "/content/drive/MyDrive/cnn"  # Replace with your own path
img_height = 180
img_width = 180
batch_size = 32

train_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="training",
    seed=42,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

val_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="validation",
    seed=42,
    image_size=(img_height, img_width),
    batch_size=batch_size
)
# Step 1: Load the training dataset
train_ds_raw = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="training",
    seed=42,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

# Step 2: Load the validation dataset
val_ds_raw = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="validation",
    seed=42,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

#  Step 3: Access class names before any transformation
class_names = train_ds_raw.class_names
num_classes = len(class_names)

# Step 4: Optimize performance (apply these after extracting class names)
AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds_raw.shuffle(1000, seed=42).cache().prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds_raw.cache().prefetch(buffer_size=AUTOTUNE)
from tensorflow.keras import layers, models

model = models.Sequential([
    layers.Rescaling(1./255, input_shape=(img_height, img_width, 3)),

    layers.Conv2D(32, (3, 3), activation='relu', padding='same'),
    layers.MaxPooling2D(),

    layers.Conv2D(64, (3, 3), activation='relu', padding='same'),
    layers.MaxPooling2D(),

    layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
    layers.MaxPooling2D(),

    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(num_classes, activation='softmax')
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=100,
    verbose=1
)
best_val_acc = max(history.history['val_accuracy'])
print(f"âœ… Best Validation Accuracy: {best_val_acc:.4f}")
from tensorflow.keras.callbacks import ModelCheckpoint

# Path to save the model (change this to your Google Drive path if needed)
checkpoint_path = '/content/drive/MyDrive/best epoch/best_model.h5'  # Adjust path if using Colab

# Define the checkpoint callback
checkpoint_cb = ModelCheckpoint(filepath=checkpoint_path,
                                monitor='val_accuracy',
                                save_best_only=True,
                                mode='max',
                                verbose=1)

# Train the model with the callback
history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=100,
    callbacks=[checkpoint_cb]
)
import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs_range = range(100)
plt.figure(figsize=(15, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Accuracy')
plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Loss')
plt.show()
from sklearn.metrics import precision_recall_fscore_support
import numpy as np

y_true = []
y_pred = []

for images, labels in val_ds:
    preds = model.predict(images)
    y_true.extend(labels.numpy())
    y_pred.extend(np.argmax(preds, axis=1))

precision, recall, f1, support = precision_recall_fscore_support(y_true, y_pred)

print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)
print("Support:", support)
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Evaluate accuracy on the validation dataset
loss, accuracy = model.evaluate(val_ds)
print(f"Validation Accuracy: {accuracy:.4f}")

# Step 2: Display sample predictions
sample_images, sample_labels = next(iter(val_ds))
predictions = np.argmax(model.predict(sample_images), axis=1)

plt.figure(figsize=(30, 40))
for i in range(min(30, len(sample_images))):
    plt.subplot(6, 5, i + 1)
    plt.imshow(sample_images[i].numpy().astype("uint8"))
    plt.title(f"True: {class_names[sample_labels[i]]}\nPred: {class_names[predictions[i]]}",
              fontsize=20)
    plt.axis('off')

plt.tight_layout(pad=2.0)
plt.show()
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import os

# Load class names from training directory
data_dir = "/content/drive/MyDrive/cnn"  # Replace with your actual data folder
class_names = sorted([entry.name for entry in os.scandir(data_dir) if entry.is_dir()])
print("Detected class names:", class_names)

# Load model
model = load_model('/content/drive/MyDrive/best epoch/best_model.h5')

# Image size for model input
img_height, img_width = 180, 180

def preprocess_image(img_path):
    img = image.load_img(img_path, target_size=(img_height, img_width))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    img_array = img_array / 255.0  # Normalize pixel values as in training
    return img_array

def predict_image(img_path):
    img_array = preprocess_image(img_path)
    predictions = model.predict(img_array)
    predicted_index = np.argmax(predictions)
    predicted_class = class_names[predicted_index] if predicted_index < len(class_names) else "Unknown"
    print(f"Image path: {img_path}")
    print(f"Predicted class index: {predicted_index}")
    print(f"Predicted class: {predicted_class}")
    print(f"Raw prediction scores: {predictions}")
    print("-" * 50)

# Example: Predict on multiple images to test different inputs
test_images = [
    '/content/drive/MyDrive/Apple___healthy/01b32971-5125-4982-98e2-22daa9ae864a___RS_HL 7977(1).JPG',
    '/content/drive/MyDrive/Apple___Cedar_apple_rust/025b2b9a-0ec4-4132-96ac-7f2832d0db4a___FREC_C.Rust 3655_newGRR(1).JPG',
    '/content/drive/MyDrive/Apple___Black_rot/0139bc6d-391c-4fd1-bcae-cc74dabfddd7___JR_FrgE.S 2734_270deg(1).JPG'
]

for img_path in test_images:
    predict_image(img_path)
